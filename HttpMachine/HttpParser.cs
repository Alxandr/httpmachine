
#line 1 "HttpParser.cs.rl"
using System;

namespace HttpMachine
{
    public class HttpParser
    {
		int[] stack = new int[3];
		int top = 0;
        int cs;
        int mark;
        int qsMark;
        int fragMark;
        IHttpParserHandler parser;

		int versionMajor = 0;
		int versionMinor = 9;

		public int MajorVersion { get { return versionMajor; } }
		public int MinorVersion { get { return versionMinor; } }

		bool gotConnectionClose;
		bool gotConnectionKeepAlive;
		bool shouldKeepAlive;

        // internal for testing
        internal int contentLength = -1;

		public bool ShouldKeepAlive { 
			get { 
				if (versionMajor > 0 && versionMinor > 0)
					// HTTP/1.1
					return !gotConnectionClose;
				else 
					// < HTTP/1.1
					return gotConnectionKeepAlive;
			}
		}


        
#line 272 "HttpParser.cs.rl"

        
        
#line 48 "HttpParser.cs"
static readonly sbyte[] _http_parser_actions =  new sbyte [] {
	0, 1, 0, 1, 4, 1, 5, 1, 
	6, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 2, 0, 4, 2, 7, 2, 2, 
	7, 3, 2, 10, 11, 2, 11, 8, 
	2, 11, 9, 2, 13, 8, 2, 13, 
	9, 2, 18, 17, 2, 19, 17, 2, 
	20, 17, 2, 21, 17, 2, 22, 23, 
	3, 7, 1, 3, 3, 7, 3, 9, 
	3, 10, 11, 9, 3, 12, 13, 9
	
};

static readonly short[] _http_parser_key_offsets =  new short [] {
	0, 0, 5, 6, 10, 15, 34, 35, 
	57, 58, 74, 76, 77, 95, 113, 133, 
	151, 169, 187, 205, 223, 241, 257, 275, 
	293, 311, 327, 345, 363, 381, 399, 417, 
	435, 451, 469, 487, 505, 523, 541, 559, 
	577, 593, 611, 629, 647, 665, 683, 701, 
	719, 737, 753, 771, 789, 807, 825, 843, 
	861, 877, 878, 879, 880, 881, 882, 884, 
	885, 887, 888, 904, 910, 916, 934, 949, 
	955, 961, 969, 976, 984, 988, 999, 1006, 
	1009, 1013, 1019, 1022, 1024, 1027, 1029, 1034, 
	1039, 1042, 1043, 1046, 1047, 1055, 1063, 1083, 
	1102, 1118, 1138, 1157, 1172, 1189, 1206, 1221, 
	1236, 1242, 1248, 1254, 1260, 1276, 1292, 1298, 
	1304, 1325, 1346, 1356, 1370, 1385, 1391, 1397, 
	1413, 1433, 1451, 1457, 1463, 1482, 1490, 1497, 
	1505, 1509, 1522, 1529, 1534, 1540, 1546, 1549, 
	1551, 1554, 1556, 1563, 1570, 1573, 1574, 1577, 
	1578, 1586, 1594, 1615, 1635, 1652, 1673, 1693, 
	1708, 1725, 1747, 1768, 1786, 1808, 1829, 1847, 
	1867, 1885, 1903, 1909, 1915, 1934, 1955, 1975, 
	1992, 2013, 2033, 2048, 2065, 2086, 2096, 2106, 
	2116, 2128, 2138, 2150, 2168, 2189, 2210, 2231, 
	2252, 2273, 2293, 2298, 2303, 2308, 2313, 2318, 
	2323, 2328, 2333, 2338, 2343, 2348, 2353, 2358, 
	2363, 2368, 2373, 2378, 2383, 2388, 2393, 2398, 
	2403, 2404, 2404, 2404, 2404, 2404, 2404
};

static readonly char[] _http_parser_trans_keys =  new char [] {
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0021', '\u0043', '\u0054', '\u0055', 
	'\u0063', '\u0074', '\u0075', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u000a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0009', '\u0020', '\u000d', '\u0021', '\u003a', '\u004f', 
	'\u006f', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u004e', '\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u004e', '\u0054', '\u006e', '\u0074', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0045', 
	'\u0065', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0043', '\u0063', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0054', '\u0074', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0049', '\u0069', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004f', 
	'\u006f', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u004e', '\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0054', 
	'\u0074', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u002d', '\u002e', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u004c', '\u006c', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0047', 
	'\u0067', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0054', '\u0074', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0048', '\u0068', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0052', '\u0072', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0041', 
	'\u0061', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0042', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u004e', '\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0053', '\u0073', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0046', '\u0066', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0045', 
	'\u0065', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0052', '\u0072', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u002d', '\u002e', '\u003a', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0043', 
	'\u0063', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u004f', '\u006f', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0044', '\u0064', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0049', '\u0069', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', 
	'\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0047', '\u0067', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0050', '\u0070', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0047', '\u0067', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0052', 
	'\u0072', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', 
	'\u003a', '\u0041', '\u0061', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0042', '\u005a', '\u005e', 
	'\u007a', '\u0021', '\u003a', '\u0044', '\u0064', '\u007c', '\u007e', '\u0023', 
	'\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u007c', 
	'\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0048', '\u0054', '\u0054', 
	'\u0050', '\u002f', '\u0030', '\u0039', '\u002e', '\u0030', '\u0039', '\u000d', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', 
	'\u0041', '\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', 
	'\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', 
	'\u003b', '\u0040', '\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', 
	'\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', 
	'\u0066', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u002d', '\u002e', 
	'\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u003a', '\u000d', '\u0020', '\u0030', '\u0039', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u002e', '\u0030', '\u0039', '\u0030', '\u0039', 
	'\u002e', '\u0030', '\u0039', '\u0030', '\u0039', '\u000d', '\u0020', '\u003a', 
	'\u0030', '\u0039', '\u000d', '\u0020', '\u003a', '\u0030', '\u0039', '\u002e', 
	'\u0030', '\u0039', '\u002e', '\u002e', '\u0030', '\u0039', '\u002e', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002d', '\u002e', '\u003d', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', 
	'\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', 
	'\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', 
	'\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002d', '\u002e', '\u003a', '\u003b', '\u003d', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003a', '\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', 
	'\u0040', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u0040', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0023', '\u0025', '\u003d', '\u003f', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u003a', '\u003b', '\u0040', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', 
	'\u003b', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', 
	'\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', 
	'\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', 
	'\u0041', '\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0023', 
	'\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0023', 
	'\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', 
	'\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003d', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002b', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002c', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002b', '\u003a', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0021', '\u0025', '\u002f', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u003f', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', 
	'\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002f', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', 
	'\u003b', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', 
	'\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u002d', 
	'\u002e', '\u002f', '\u003a', '\u003f', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u002f', '\u003a', '\u003f', '\u000d', '\u0020', 
	'\u002f', '\u003f', '\u0030', '\u0039', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002e', '\u0030', '\u0039', '\u0030', '\u0039', '\u002e', 
	'\u0030', '\u0039', '\u0030', '\u0039', '\u000d', '\u0020', '\u002f', '\u003a', 
	'\u003f', '\u0030', '\u0039', '\u000d', '\u0020', '\u002f', '\u003a', '\u003f', 
	'\u0030', '\u0039', '\u002e', '\u0030', '\u0039', '\u002e', '\u002e', '\u0030', 
	'\u0039', '\u002e', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u005f', '\u007e', '\u0024', 
	'\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u0040', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002d', '\u002e', '\u003a', '\u003b', '\u003d', '\u005f', '\u007e', '\u0024', 
	'\u002f', '\u0030', '\u0039', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', 
	'\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003a', '\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002d', '\u002e', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', 
	'\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', 
	'\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', 
	'\u002f', '\u003a', '\u003b', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002f', '\u003d', '\u003f', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002f', '\u003a', '\u003b', '\u003d', '\u003f', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', 
	'\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002e', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u0030', 
	'\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', 
	'\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002d', '\u002e', '\u003d', '\u005f', '\u007e', '\u0024', 
	'\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', '\u003a', '\u003b', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003f', 
	'\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002d', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003a', '\u003b', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', 
	'\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', 
	'\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002b', '\u002d', 
	'\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002b', '\u002d', '\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002b', '\u003a', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u002b', '\u002d', 
	'\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002b', '\u002d', '\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u002b', '\u003a', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002f', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', 
	'\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', 
	'\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002b', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002c', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u002d', 
	'\u002e', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', '\u003b', 
	'\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002b', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002c', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', (char) 0
};

static readonly sbyte[] _http_parser_single_lengths =  new sbyte [] {
	0, 1, 1, 0, 1, 9, 1, 10, 
	1, 4, 2, 1, 6, 6, 8, 6, 
	6, 6, 6, 6, 6, 4, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	4, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 4, 6, 6, 6, 6, 6, 6, 
	4, 1, 1, 1, 1, 1, 0, 1, 
	0, 1, 8, 0, 0, 8, 7, 0, 
	0, 2, 1, 2, 0, 5, 1, 3, 
	2, 0, 1, 0, 1, 0, 3, 3, 
	1, 1, 1, 1, 2, 2, 10, 9, 
	8, 12, 9, 9, 7, 9, 7, 7, 
	0, 0, 0, 0, 8, 8, 0, 0, 
	11, 11, 2, 6, 7, 0, 0, 8, 
	10, 10, 0, 0, 7, 2, 1, 2, 
	0, 7, 1, 5, 4, 0, 1, 0, 
	1, 0, 5, 5, 1, 1, 1, 1, 
	2, 2, 9, 8, 7, 11, 8, 9, 
	7, 12, 11, 10, 14, 11, 12, 10, 
	10, 10, 0, 0, 7, 9, 8, 7, 
	11, 8, 9, 7, 13, 4, 4, 2, 
	6, 4, 4, 8, 13, 11, 13, 13, 
	11, 10, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0
};

static readonly sbyte[] _http_parser_range_lengths =  new sbyte [] {
	0, 2, 0, 2, 2, 5, 0, 6, 
	0, 6, 0, 0, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 5, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	5, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 0, 0, 0, 0, 0, 1, 0, 
	1, 0, 4, 3, 3, 5, 4, 3, 
	3, 3, 3, 3, 2, 3, 3, 0, 
	1, 3, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 0, 3, 3, 5, 5, 
	4, 4, 5, 3, 5, 4, 4, 4, 
	3, 3, 3, 3, 4, 4, 3, 3, 
	5, 5, 4, 4, 4, 3, 3, 4, 
	5, 4, 3, 3, 6, 3, 3, 3, 
	2, 3, 3, 0, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 0, 
	3, 3, 6, 6, 5, 5, 6, 3, 
	5, 5, 5, 4, 4, 5, 3, 5, 
	4, 4, 3, 3, 6, 6, 6, 5, 
	5, 6, 3, 5, 4, 3, 3, 4, 
	3, 3, 4, 5, 4, 5, 4, 4, 
	5, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	0, 0, 0, 0, 0, 0, 0
};

static readonly short[] _http_parser_index_offsets =  new short [] {
	0, 0, 4, 6, 9, 13, 28, 30, 
	47, 49, 60, 63, 65, 78, 91, 106, 
	119, 132, 145, 158, 171, 184, 195, 208, 
	221, 234, 246, 259, 272, 285, 298, 311, 
	324, 335, 348, 361, 374, 387, 400, 413, 
	426, 438, 451, 464, 477, 490, 503, 516, 
	529, 542, 553, 566, 579, 592, 605, 618, 
	631, 642, 644, 646, 648, 650, 652, 654, 
	656, 658, 660, 673, 677, 681, 695, 707, 
	711, 715, 721, 726, 732, 735, 744, 749, 
	753, 757, 761, 764, 766, 769, 771, 776, 
	781, 784, 786, 789, 791, 797, 803, 819, 
	834, 847, 864, 879, 892, 905, 919, 931, 
	943, 947, 951, 955, 959, 972, 985, 989, 
	993, 1010, 1027, 1034, 1045, 1057, 1061, 1065, 
	1078, 1094, 1109, 1113, 1117, 1131, 1137, 1142, 
	1148, 1151, 1162, 1167, 1173, 1179, 1183, 1186, 
	1188, 1191, 1193, 1200, 1207, 1210, 1212, 1215, 
	1217, 1223, 1229, 1245, 1260, 1273, 1290, 1305, 
	1318, 1331, 1349, 1366, 1381, 1400, 1417, 1433, 
	1449, 1464, 1479, 1483, 1487, 1501, 1517, 1532, 
	1545, 1562, 1577, 1590, 1603, 1621, 1629, 1637, 
	1644, 1654, 1662, 1671, 1685, 1703, 1720, 1738, 
	1756, 1773, 1789, 1793, 1797, 1801, 1805, 1809, 
	1813, 1817, 1821, 1825, 1829, 1833, 1837, 1841, 
	1845, 1849, 1853, 1857, 1861, 1865, 1869, 1873, 
	1877, 1879, 1880, 1881, 1882, 1883, 1884
};

static readonly byte[] _http_parser_indicies =  new byte [] {
	0, 2, 2, 1, 3, 1, 4, 4, 
	1, 5, 6, 6, 1, 7, 8, 9, 
	10, 11, 9, 13, 9, 9, 9, 12, 
	9, 14, 14, 1, 15, 1, 16, 17, 
	18, 19, 20, 18, 19, 20, 17, 17, 
	17, 17, 17, 17, 17, 17, 1, 21, 
	1, 22, 23, 22, 22, 22, 22, 22, 
	22, 22, 22, 1, 25, 25, 24, 27, 
	26, 22, 23, 28, 28, 22, 22, 22, 
	22, 22, 22, 22, 22, 1, 22, 23, 
	29, 29, 22, 22, 22, 22, 22, 22, 
	22, 22, 1, 22, 23, 30, 31, 30, 
	31, 22, 22, 22, 22, 22, 22, 22, 
	22, 1, 22, 23, 32, 32, 22, 22, 
	22, 22, 22, 22, 22, 22, 1, 22, 
	23, 33, 33, 22, 22, 22, 22, 22, 
	22, 22, 22, 1, 22, 23, 34, 34, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	1, 22, 23, 35, 35, 22, 22, 22, 
	22, 22, 22, 22, 22, 1, 22, 23, 
	36, 36, 22, 22, 22, 22, 22, 22, 
	22, 22, 1, 22, 23, 37, 37, 22, 
	22, 22, 22, 22, 22, 22, 22, 1, 
	22, 38, 22, 22, 22, 22, 22, 22, 
	22, 22, 1, 22, 23, 39, 39, 22, 
	22, 22, 22, 22, 22, 22, 22, 1, 
	22, 23, 40, 40, 22, 22, 22, 22, 
	22, 22, 22, 22, 1, 22, 23, 41, 
	41, 22, 22, 22, 22, 22, 22, 22, 
	22, 1, 22, 42, 22, 23, 22, 22, 
	22, 22, 22, 22, 22, 1, 22, 23, 
	43, 43, 22, 22, 22, 22, 22, 22, 
	22, 22, 1, 22, 23, 44, 44, 22, 
	22, 22, 22, 22, 22, 22, 22, 1, 
	22, 23, 45, 45, 22, 22, 22, 22, 
	22, 22, 22, 22, 1, 22, 23, 46, 
	46, 22, 22, 22, 22, 22, 22, 22, 
	22, 1, 22, 23, 47, 47, 22, 22, 
	22, 22, 22, 22, 22, 22, 1, 22, 
	23, 48, 48, 22, 22, 22, 22, 22, 
	22, 22, 22, 1, 22, 49, 22, 22, 
	22, 22, 22, 22, 22, 22, 1, 22, 
	23, 50, 50, 22, 22, 22, 22, 22, 
	22, 22, 22, 1, 22, 23, 51, 51, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	1, 22, 23, 52, 52, 22, 22, 22, 
	22, 22, 22, 22, 22, 1, 22, 23, 
	53, 53, 22, 22, 22, 22, 22, 22, 
	22, 22, 1, 22, 23, 54, 54, 22, 
	22, 22, 22, 22, 22, 22, 22, 1, 
	22, 23, 55, 55, 22, 22, 22, 22, 
	22, 22, 22, 22, 1, 22, 23, 56, 
	56, 22, 22, 22, 22, 22, 22, 22, 
	22, 1, 22, 57, 22, 23, 22, 22, 
	22, 22, 22, 22, 22, 1, 22, 23, 
	58, 58, 22, 22, 22, 22, 22, 22, 
	22, 22, 1, 22, 23, 59, 59, 22, 
	22, 22, 22, 22, 22, 22, 22, 1, 
	22, 23, 60, 60, 22, 22, 22, 22, 
	22, 22, 22, 22, 1, 22, 23, 61, 
	61, 22, 22, 22, 22, 22, 22, 22, 
	22, 1, 22, 23, 62, 62, 22, 22, 
	22, 22, 22, 22, 22, 22, 1, 22, 
	23, 63, 63, 22, 22, 22, 22, 22, 
	22, 22, 22, 1, 22, 23, 64, 64, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	1, 22, 23, 65, 65, 22, 22, 22, 
	22, 22, 22, 22, 22, 1, 22, 66, 
	22, 22, 22, 22, 22, 22, 22, 22, 
	1, 22, 23, 67, 67, 22, 22, 22, 
	22, 22, 22, 22, 22, 1, 22, 23, 
	68, 68, 22, 22, 22, 22, 22, 22, 
	22, 22, 1, 22, 23, 69, 69, 22, 
	22, 22, 22, 22, 22, 22, 22, 1, 
	22, 23, 70, 70, 22, 22, 22, 22, 
	22, 22, 22, 22, 1, 22, 23, 71, 
	71, 22, 22, 22, 22, 22, 22, 22, 
	22, 1, 22, 23, 72, 72, 22, 22, 
	22, 22, 22, 22, 22, 22, 1, 22, 
	73, 22, 22, 22, 22, 22, 22, 22, 
	22, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 84, 85, 86, 
	85, 87, 85, 85, 85, 85, 85, 85, 
	1, 88, 88, 88, 1, 85, 85, 85, 
	1, 83, 84, 89, 90, 89, 89, 89, 
	89, 89, 91, 89, 92, 92, 1, 83, 
	84, 89, 90, 89, 89, 89, 89, 89, 
	89, 89, 1, 93, 93, 93, 1, 89, 
	89, 89, 1, 94, 95, 96, 97, 97, 
	1, 94, 97, 97, 97, 1, 94, 98, 
	97, 97, 97, 1, 99, 99, 1, 83, 
	84, 100, 101, 102, 99, 99, 99, 1, 
	100, 99, 99, 99, 1, 83, 84, 102, 
	1, 83, 84, 102, 1, 103, 99, 99, 
	1, 104, 105, 1, 106, 1, 107, 108, 
	1, 109, 1, 83, 84, 102, 110, 1, 
	83, 84, 102, 101, 1, 107, 111, 1, 
	107, 1, 104, 112, 1, 104, 1, 94, 
	95, 113, 97, 97, 1, 94, 95, 97, 
	97, 97, 1, 83, 84, 89, 90, 114, 
	115, 89, 89, 89, 89, 89, 97, 89, 
	92, 92, 1, 83, 84, 89, 90, 114, 
	89, 89, 89, 89, 89, 97, 89, 92, 
	92, 1, 83, 84, 89, 90, 89, 89, 
	89, 89, 89, 89, 116, 116, 1, 83, 
	84, 89, 90, 117, 118, 119, 89, 89, 
	89, 89, 89, 89, 99, 116, 116, 1, 
	83, 84, 89, 90, 117, 89, 89, 89, 
	89, 89, 99, 89, 116, 116, 1, 83, 
	84, 89, 90, 119, 89, 89, 89, 89, 
	89, 89, 89, 1, 83, 84, 89, 90, 
	89, 89, 89, 89, 102, 89, 89, 89, 
	1, 83, 84, 120, 121, 122, 120, 123, 
	120, 120, 120, 120, 120, 120, 1, 124, 
	125, 126, 127, 126, 126, 126, 126, 126, 
	126, 126, 1, 128, 129, 130, 131, 130, 
	130, 130, 130, 130, 130, 130, 1, 132, 
	132, 132, 1, 130, 130, 130, 1, 133, 
	133, 133, 1, 120, 120, 120, 1, 134, 
	135, 136, 137, 138, 136, 136, 136, 136, 
	136, 136, 136, 1, 139, 140, 141, 142, 
	143, 141, 141, 141, 141, 141, 141, 141, 
	1, 144, 144, 144, 1, 141, 141, 141, 
	1, 83, 84, 85, 86, 145, 146, 147, 
	85, 87, 85, 85, 85, 148, 85, 149, 
	149, 1, 83, 84, 85, 86, 145, 151, 
	85, 85, 87, 85, 85, 85, 145, 150, 
	145, 145, 1, 150, 152, 150, 150, 150, 
	150, 1, 153, 154, 155, 153, 153, 153, 
	153, 153, 153, 153, 1, 83, 84, 153, 
	154, 153, 153, 153, 153, 153, 153, 153, 
	1, 156, 156, 156, 1, 153, 153, 153, 
	1, 83, 84, 153, 154, 157, 153, 153, 
	153, 153, 153, 153, 153, 1, 83, 84, 
	158, 159, 153, 158, 153, 161, 158, 158, 
	158, 160, 158, 162, 162, 1, 83, 84, 
	158, 159, 153, 158, 153, 161, 158, 158, 
	158, 158, 158, 158, 1, 163, 163, 163, 
	1, 158, 158, 158, 1, 83, 84, 153, 
	154, 153, 153, 153, 153, 160, 153, 153, 
	164, 164, 1, 165, 166, 167, 168, 168, 
	1, 165, 168, 168, 168, 1, 165, 169, 
	168, 168, 168, 1, 170, 170, 1, 83, 
	84, 171, 172, 153, 173, 153, 170, 170, 
	170, 1, 171, 170, 170, 170, 1, 83, 
	84, 153, 173, 153, 1, 83, 84, 153, 
	153, 173, 1, 174, 170, 170, 1, 175, 
	176, 1, 177, 1, 178, 179, 1, 180, 
	1, 83, 84, 153, 173, 153, 181, 1, 
	83, 84, 153, 173, 153, 172, 1, 178, 
	182, 1, 178, 1, 175, 183, 1, 175, 
	1, 165, 166, 184, 168, 168, 1, 165, 
	166, 168, 168, 168, 1, 83, 84, 153, 
	154, 185, 186, 153, 153, 153, 153, 168, 
	153, 153, 164, 164, 1, 83, 84, 153, 
	154, 185, 153, 153, 153, 153, 168, 153, 
	153, 164, 164, 1, 83, 84, 153, 154, 
	153, 153, 153, 153, 153, 153, 187, 187, 
	1, 83, 84, 153, 154, 188, 189, 190, 
	153, 153, 153, 153, 153, 170, 153, 187, 
	187, 1, 83, 84, 153, 154, 188, 153, 
	153, 153, 153, 170, 153, 153, 187, 187, 
	1, 83, 84, 153, 154, 190, 153, 153, 
	153, 153, 153, 153, 153, 1, 83, 84, 
	153, 154, 153, 153, 153, 153, 173, 153, 
	153, 153, 1, 83, 84, 158, 159, 191, 
	192, 153, 158, 153, 161, 158, 158, 158, 
	168, 158, 162, 162, 1, 83, 84, 158, 
	159, 191, 153, 158, 153, 161, 158, 158, 
	158, 168, 158, 162, 162, 1, 83, 84, 
	158, 159, 153, 158, 153, 161, 158, 158, 
	158, 158, 193, 193, 1, 83, 84, 158, 
	159, 194, 195, 153, 196, 158, 158, 153, 
	161, 158, 158, 158, 170, 193, 193, 1, 
	83, 84, 158, 159, 194, 153, 158, 153, 
	161, 158, 158, 158, 170, 158, 193, 193, 
	1, 83, 84, 158, 159, 153, 196, 158, 
	158, 153, 161, 158, 158, 158, 158, 158, 
	1, 83, 84, 158, 159, 153, 158, 153, 
	161, 158, 158, 158, 173, 158, 158, 158, 
	1, 83, 84, 197, 198, 155, 197, 153, 
	199, 197, 197, 197, 197, 197, 197, 1, 
	83, 84, 197, 198, 153, 197, 153, 199, 
	197, 197, 197, 197, 197, 197, 1, 200, 
	200, 200, 1, 197, 197, 197, 1, 83, 
	84, 153, 154, 153, 153, 153, 153, 91, 
	153, 153, 201, 201, 1, 83, 84, 153, 
	154, 202, 203, 153, 153, 153, 153, 97, 
	153, 153, 201, 201, 1, 83, 84, 153, 
	154, 202, 153, 153, 153, 153, 97, 153, 
	153, 201, 201, 1, 83, 84, 153, 154, 
	153, 153, 153, 153, 153, 153, 204, 204, 
	1, 83, 84, 153, 154, 205, 206, 207, 
	153, 153, 153, 153, 153, 99, 153, 204, 
	204, 1, 83, 84, 153, 154, 205, 153, 
	153, 153, 153, 99, 153, 153, 204, 204, 
	1, 83, 84, 153, 154, 207, 153, 153, 
	153, 153, 153, 153, 153, 1, 83, 84, 
	153, 154, 153, 153, 153, 153, 102, 153, 
	153, 153, 1, 83, 84, 85, 86, 145, 
	146, 145, 151, 85, 85, 87, 85, 85, 
	85, 148, 149, 149, 1, 150, 208, 209, 
	152, 148, 148, 148, 1, 150, 208, 150, 
	152, 148, 148, 148, 1, 150, 152, 150, 
	150, 210, 210, 1, 83, 84, 150, 211, 
	212, 213, 210, 210, 210, 1, 150, 211, 
	150, 152, 210, 210, 210, 1, 83, 84, 
	150, 213, 150, 150, 150, 150, 1, 83, 
	84, 153, 154, 155, 153, 153, 153, 153, 
	102, 153, 153, 153, 1, 83, 84, 85, 
	86, 145, 146, 147, 151, 85, 85, 87, 
	85, 85, 85, 148, 149, 149, 1, 83, 
	84, 85, 86, 145, 151, 85, 85, 87, 
	85, 85, 85, 145, 150, 214, 214, 1, 
	83, 84, 85, 86, 145, 215, 216, 217, 
	85, 85, 87, 85, 85, 85, 210, 214, 
	214, 1, 83, 84, 85, 86, 145, 215, 
	145, 151, 85, 85, 87, 85, 85, 85, 
	210, 214, 214, 1, 83, 84, 85, 86, 
	145, 217, 85, 85, 87, 85, 85, 85, 
	145, 150, 145, 145, 1, 83, 84, 197, 
	198, 155, 197, 153, 199, 197, 197, 197, 
	102, 197, 197, 197, 1, 5, 218, 218, 
	1, 5, 219, 219, 1, 5, 220, 220, 
	1, 5, 221, 221, 1, 5, 222, 222, 
	1, 5, 223, 223, 1, 5, 224, 224, 
	1, 5, 225, 225, 1, 5, 226, 226, 
	1, 5, 227, 227, 1, 5, 228, 228, 
	1, 5, 229, 229, 1, 5, 230, 230, 
	1, 5, 231, 231, 1, 5, 232, 232, 
	1, 5, 233, 233, 1, 5, 234, 234, 
	1, 5, 235, 235, 1, 5, 236, 236, 
	1, 5, 237, 237, 1, 5, 238, 238, 
	1, 5, 239, 239, 1, 5, 1, 240, 
	241, 1, 240, 242, 1, 0
};

static readonly byte[] _http_parser_trans_targs =  new byte [] {
	2, 0, 4, 3, 4, 5, 186, 6, 
	57, 66, 67, 101, 73, 69, 112, 7, 
	8, 9, 12, 33, 50, 211, 9, 10, 
	11, 10, 11, 6, 13, 14, 15, 22, 
	16, 17, 18, 19, 20, 21, 10, 23, 
	24, 25, 26, 27, 28, 29, 30, 31, 
	32, 10, 34, 35, 36, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 10, 51, 52, 53, 54, 55, 
	56, 10, 58, 59, 60, 61, 62, 63, 
	64, 65, 6, 6, 57, 66, 67, 69, 
	68, 70, 71, 73, 94, 72, 74, 81, 
	92, 75, 76, 77, 78, 79, 80, 82, 
	83, 90, 84, 85, 88, 86, 87, 89, 
	91, 93, 95, 96, 97, 98, 99, 100, 
	101, 102, 106, 108, 6, 57, 103, 104, 
	6, 57, 103, 104, 105, 107, 6, 57, 
	109, 102, 110, 6, 57, 109, 102, 110, 
	111, 113, 172, 181, 173, 180, 114, 160, 
	115, 116, 117, 119, 118, 120, 121, 122, 
	125, 124, 153, 123, 146, 126, 133, 144, 
	127, 128, 129, 130, 131, 132, 134, 135, 
	142, 136, 137, 140, 138, 139, 141, 143, 
	145, 147, 148, 149, 150, 151, 152, 154, 
	155, 156, 157, 158, 159, 161, 162, 164, 
	163, 165, 166, 167, 168, 169, 170, 171, 
	174, 175, 176, 177, 178, 179, 182, 183, 
	184, 185, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 208, 
	212, 214, 213
};

static readonly sbyte[] _http_parser_trans_actions =  new sbyte [] {
	1, 0, 41, 0, 3, 7, 0, 84, 
	84, 47, 47, 44, 47, 47, 80, 0, 
	0, 23, 23, 23, 23, 0, 0, 25, 
	77, 0, 27, 29, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 71, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 65, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 68, 0, 0, 0, 0, 0, 
	0, 74, 0, 0, 0, 0, 0, 19, 
	0, 21, 0, 11, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 92, 92, 17, 17, 
	62, 62, 0, 0, 0, 0, 88, 88, 
	13, 50, 13, 56, 56, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 39
};

static readonly sbyte[] _http_parser_from_state_actions =  new sbyte [] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37
};

static readonly sbyte[] _http_parser_eof_actions =  new sbyte [] {
	0, 0, 0, 0, 5, 9, 0, 0, 
	0, 25, 0, 29, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 9, 0, 0, 9, 9, 0, 
	0, 0, 0, 0, 0, 9, 0, 9, 
	9, 0, 0, 0, 0, 0, 9, 9, 
	0, 0, 0, 0, 0, 0, 9, 9, 
	9, 9, 9, 9, 9, 9, 59, 59, 
	0, 0, 0, 0, 53, 53, 0, 0, 
	9, 9, 0, 0, 9, 0, 0, 9, 
	9, 9, 0, 0, 9, 0, 0, 0, 
	0, 9, 0, 9, 9, 0, 0, 0, 
	0, 0, 9, 9, 0, 0, 0, 0, 
	0, 0, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 0, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 0, 0, 
	9, 0, 9, 9, 9, 9, 9, 9, 
	9, 9, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 0, 31, 33, 35, 0
};

const int http_parser_start = 1;
const int http_parser_first_final = 211;
const int http_parser_error = 0;

const int http_parser_en_main = 1;
const int http_parser_en_body_identity = 209;
const int http_parser_en_body_identity_eof = 213;
const int http_parser_en_dead = 210;


#line 275 "HttpParser.cs.rl"
        
        public HttpParser(IHttpParserHandler parser)
        {
            this.parser = parser;
            
#line 872 "HttpParser.cs"
	{
	cs = http_parser_start;
	top = 0;
	}

#line 280 "HttpParser.cs.rl"
        }

        public int Execute(ArraySegment<byte> buf)
        {
            byte[] data = buf.Array;
            int p = buf.Offset;
            int pe = buf.Offset + buf.Count;
            //int eof = pe == 0 ? 0 : -1;
            int eof = pe;
            mark = 0;
            qsMark = 0;
            fragMark = 0;
            
			if (p == pe)
				Console.WriteLine("Parser executing on p == pe (EOF)");

            
#line 896 "HttpParser.cs"
	{
	sbyte _klen;
	short _trans;
	sbyte _acts;
	sbyte _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _http_parser_from_state_actions[cs];
	_nacts = _http_parser_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _http_parser_actions[_acts++] ) {
	case 28:
#line 262 "HttpParser.cs.rl"
	{
			throw new Exception("Parser is dead; there shouldn't be more data. Client is bogus? fpc =" + p);
		}
	break;
#line 919 "HttpParser.cs"
		default: break;
		}
	}

	_keys = _http_parser_key_offsets[cs];
	_trans = (short)_http_parser_index_offsets[cs];

	_klen = _http_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _http_parser_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _http_parser_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _http_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _http_parser_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _http_parser_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	_trans = (short)_http_parser_indicies[_trans];
	cs = _http_parser_trans_targs[_trans];

	if ( _http_parser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _http_parser_trans_actions[_trans];
	_nacts = _http_parser_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _http_parser_actions[_acts++] )
		{
	case 0:
#line 45 "HttpParser.cs.rl"
	{
			Console.WriteLine("message_begin");
			parser.OnMessageBegin(this);
		}
	break;
	case 1:
#line 50 "HttpParser.cs.rl"
	{
            Console.WriteLine("matched absolute_uri");
        }
	break;
	case 2:
#line 53 "HttpParser.cs.rl"
	{
            Console.WriteLine("matched abs_path");
        }
	break;
	case 3:
#line 56 "HttpParser.cs.rl"
	{
            Console.WriteLine("matched authority");
        }
	break;
	case 4:
#line 69 "HttpParser.cs.rl"
	{
            mark = p;
        }
	break;
	case 6:
#line 78 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_method fpc " + fpc + " mark " + mark);
            parser.OnMethod(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 7:
#line 83 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_request_uri fpc " + fpc);
            mark = p;
        }
	break;
	case 9:
#line 93 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_request_uri fpc " + fpc + " mark " + mark);
            parser.OnRequestUri(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 10:
#line 98 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_query_string fpc " + fpc);
            qsMark = p;
        }
	break;
	case 11:
#line 103 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_query_string fpc " + fpc + " qsMark " + qsMark);
            parser.OnQueryString(this, new ArraySegment<byte>(data, qsMark, p - qsMark));
        }
	break;
	case 12:
#line 107 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_fragment fpc " + fpc);
            fragMark = p;
        }
	break;
	case 13:
#line 112 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_fragment fpc " + fpc + " fragMark " + fragMark);
            parser.OnFragment(this, new ArraySegment<byte>(data, fragMark, p - fragMark));
        }
	break;
	case 14:
#line 117 "HttpParser.cs.rl"
	{
			versionMajor = (char)data[p] - '0';
		}
	break;
	case 15:
#line 121 "HttpParser.cs.rl"
	{
			versionMinor = (char)data[p] - '0';
		}
	break;
	case 16:
#line 125 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_header_name fpc " + fpc + " fc " + (char)fc);
            mark = p;
        }
	break;
	case 17:
#line 130 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_name fpc " + fpc + " fc " + (char)fc);
            parser.OnHeaderName(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 18:
#line 135 "HttpParser.cs.rl"
	{
            if (contentLength != -1) throw new Exception("Already got Content-Length. Possible attack?");
			contentLength = 0;
        }
	break;
	case 19:
#line 140 "HttpParser.cs.rl"
	{
		}
	break;
	case 20:
#line 143 "HttpParser.cs.rl"
	{
		}
	break;
	case 21:
#line 146 "HttpParser.cs.rl"
	{
		}
	break;
	case 22:
#line 149 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_header_value fpc " + fpc + " fc " + (char)fc);
            mark = p;
        }
	break;
	case 23:
#line 154 "HttpParser.cs.rl"
	{
            //Console.WriteLine("header_value_char fpc " + fpc + " fc " + (char)fc);
            if (contentLength > -1)
            {
                var cfc = (char)data[p];
                if (cfc == ' ')
                {
                    {p++; if (true) goto _out; }
                }

                if (cfc < '0' || cfc > '9')
                    throw new Exception("Bogus content length");

                contentLength *= 10;
                contentLength += (int)data[p] - (int)'0';
            }
        }
	break;
	case 24:
#line 172 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_value fpc " + fpc + " fc " + (char)fc);
            parser.OnHeaderValue(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 29:
#line 266 "HttpParser.cs.rl"
	{
			Console.WriteLine("in_body_identity_eof");
		}
	break;
#line 1153 "HttpParser.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	sbyte __acts = _http_parser_eof_actions[cs];
	sbyte __nacts = _http_parser_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _http_parser_actions[__acts++] ) {
	case 5:
#line 73 "HttpParser.cs.rl"
	{
            //Console.WriteLine("eof_leave_method fpc " + fpc + " mark " + mark);
            parser.OnMethod(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 8:
#line 88 "HttpParser.cs.rl"
	{
            //Console.WriteLine("eof_leave_request_uri!! fpc " + fpc + " mark " + mark);
            parser.OnRequestUri(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 11:
#line 103 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_query_string fpc " + fpc + " qsMark " + qsMark);
            parser.OnQueryString(this, new ArraySegment<byte>(data, qsMark, p - qsMark));
        }
	break;
	case 13:
#line 112 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_fragment fpc " + fpc + " fragMark " + fragMark);
            parser.OnFragment(this, new ArraySegment<byte>(data, fragMark, p - fragMark));
        }
	break;
	case 17:
#line 130 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_name fpc " + fpc + " fc " + (char)fc);
            parser.OnHeaderName(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 24:
#line 172 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_value fpc " + fpc + " fc " + (char)fc);
            parser.OnHeaderValue(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 25:
#line 177 "HttpParser.cs.rl"
	{
			Console.WriteLine("leave_headers contentLength = " + contentLength);
            parser.OnHeadersEnd(this);

			// if chunked transfer, ignore content length and parse chunked (but we can't yet so bail)
			// if content length given but zero, read next request
			// if content length is given and non-zero, we should read that many bytes
			// if content length is not given
			//   if should keep alive, assume next request is coming and read it
			//   else read body until EOF

			if (contentLength == 0)
			{
				parser.OnMessageEnd(this);
				p--;
				{cs = 1; if (true) goto _again;}
			}
			else if (contentLength > 0)
			{
				{cs = 209; if (true) goto _again;}
			}
			else
			{
				Console.WriteLine("Request had no content length.");
				if (ShouldKeepAlive)
				{
					parser.OnMessageEnd(this);
					Console.WriteLine("Should keep alive, will read next message.");
					p--;
					{cs = 1; if (true) goto _again;}
				}
				else
				{
					Console.WriteLine("Not keeping alive, will read until eof. Will hold, but currently fpc = " + p);
					p--;
					{cs = 213; if (true) goto _again;}
				}
			}
        }
	break;
	case 26:
#line 217 "HttpParser.cs.rl"
	{
			var toRead = Math.Min(pe - p, contentLength);
			if (toRead > 0)
			{
				parser.OnBody(this, new ArraySegment<byte>(data, p, toRead));
				p += toRead - 1;
				contentLength -= toRead;

				if (contentLength == 0)
				{
					parser.OnMessageEnd(this);

					if (ShouldKeepAlive)
						{cs = stack[--top]; if (true) goto _again;}
					else
					{
						p--;
						{cs = 210; if (true) goto _again;}
					}
				}
			}
		}
	break;
	case 27:
#line 240 "HttpParser.cs.rl"
	{
			Console.WriteLine("eof_leave_body_identity_eof");
			var toRead = pe - p;
			if (toRead > 0)
			{
				parser.OnBody(this, new ArraySegment<byte>(data, p, toRead));
				p += toRead - 1;
			}
			else
			{
				parser.OnMessageEnd(this);
				
				if (ShouldKeepAlive)
					{cs = 1; if (true) goto _again;}
				else
				{
					p--;
					{cs = 210; if (true) goto _again;}
				}
			}
		}
	break;
#line 1303 "HttpParser.cs"
		default: break;
		}
	}
	}

	_out: {}
	}

#line 297 "HttpParser.cs.rl"
            
            var result = p - buf.Offset;

			if (result != buf.Count)
			{
				Console.WriteLine("error on character " + p);
				Console.WriteLine("('" + buf.Array[p] + "')");
				Console.WriteLine("('" + (char)buf.Array[p] + "')");
			}

			return p - buf.Offset;
        }
    }
}