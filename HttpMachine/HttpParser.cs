
#line 1 "HttpParser.cs.rl"
using System;

namespace HttpMachine
{
    public class HttpParser
    {
        int cs;
        int mark;
        int qsMark;
        int fragMark;
        IHttpParserHandler parser;

		int versionMajor = 0;
		int versionMinor = 9;

		public int MajorVersion { get { return versionMajor; } }
		public int MinorVersion { get { return versionMinor; } }

		bool gotConnectionHeader;
		bool gotTransferEncodingHeader;
		bool gotUpgradeHeader;

		bool gotConnectionClose;
		bool gotConnectionKeepAlive;
		bool gotTransferEncodingChunked;
		bool gotUpgradeValue;

        // internal for testing
        internal int contentLength = -1;

		public bool ShouldKeepAlive { 
			get { 
				if (versionMajor > 0 && versionMinor > 0)
					// HTTP/1.1
					return !gotConnectionClose;
				else 
					// < HTTP/1.1
					return gotConnectionKeepAlive;
			}
		}


        
#line 317 "HttpParser.cs.rl"

        
        
#line 51 "HttpParser.cs"
static readonly sbyte[] _http_parser_actions =  new sbyte [] {
	0, 1, 7, 1, 8, 1, 9, 1, 
	10, 1, 11, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 32, 1, 
	33, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 2, 0, 7, 2, 0, 
	10, 2, 6, 14, 2, 12, 4, 2, 
	16, 17, 2, 17, 14, 2, 17, 15, 
	2, 19, 14, 2, 19, 15, 2, 24, 
	23, 2, 25, 23, 2, 28, 23, 2, 
	30, 23, 2, 31, 32, 2, 33, 9, 
	3, 5, 13, 2, 3, 5, 13, 3, 
	3, 16, 17, 15, 3, 18, 19, 15, 
	3, 26, 33, 9, 3, 27, 33, 9, 
	3, 29, 33, 9, 4, 5, 13, 1, 
	3, 4, 5, 13, 3, 15
};

static readonly short[] _http_parser_key_offsets =  new short [] {
	0, 0, 5, 6, 10, 15, 34, 35, 
	57, 58, 74, 82, 84, 85, 91, 95, 
	99, 103, 107, 111, 113, 117, 121, 125, 
	127, 131, 135, 139, 142, 146, 150, 154, 
	158, 162, 164, 182, 200, 220, 238, 256, 
	274, 292, 310, 328, 344, 362, 380, 398, 
	414, 432, 450, 468, 486, 504, 522, 538, 
	556, 574, 592, 610, 628, 646, 664, 680, 
	698, 716, 734, 752, 770, 788, 806, 824, 
	840, 858, 876, 894, 912, 930, 948, 964, 
	965, 966, 967, 968, 969, 971, 972, 974, 
	975, 991, 997, 1003, 1021, 1036, 1042, 1048, 
	1056, 1063, 1071, 1075, 1086, 1093, 1096, 1100, 
	1106, 1109, 1111, 1114, 1116, 1121, 1126, 1129, 
	1130, 1133, 1134, 1142, 1150, 1170, 1189, 1205, 
	1225, 1244, 1259, 1276, 1293, 1308, 1323, 1329, 
	1335, 1341, 1347, 1363, 1379, 1385, 1391, 1412, 
	1433, 1443, 1457, 1472, 1478, 1484, 1500, 1520, 
	1538, 1544, 1550, 1569, 1577, 1584, 1592, 1596, 
	1609, 1616, 1621, 1627, 1633, 1636, 1638, 1641, 
	1643, 1650, 1657, 1660, 1661, 1664, 1665, 1673, 
	1681, 1702, 1722, 1739, 1760, 1780, 1795, 1812, 
	1834, 1855, 1873, 1895, 1916, 1934, 1954, 1972, 
	1990, 1996, 2002, 2021, 2042, 2062, 2079, 2100, 
	2120, 2135, 2152, 2173, 2183, 2193, 2203, 2215, 
	2225, 2237, 2255, 2276, 2297, 2318, 2339, 2360, 
	2380, 2385, 2390, 2395, 2400, 2405, 2410, 2415, 
	2420, 2425, 2430, 2435, 2440, 2445, 2450, 2455, 
	2460, 2465, 2470, 2475, 2480, 2485, 2490, 2491, 
	2491, 2491, 2491, 2491, 2491
};

static readonly char[] _http_parser_trans_keys =  new char [] {
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0021', '\u0043', '\u0054', '\u0055', 
	'\u0063', '\u0074', '\u0075', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', 
	'\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', 
	'\u007a', '\u000a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0009', '\u000a', '\u000d', '\u0020', '\u0043', '\u004b', 
	'\u0063', '\u006b', '\u000a', '\u000d', '\u000a', '\u000a', '\u000d', '\u0048', 
	'\u004c', '\u0068', '\u006c', '\u000a', '\u000d', '\u0055', '\u0075', '\u000a', 
	'\u000d', '\u004e', '\u006e', '\u000a', '\u000d', '\u004b', '\u006b', '\u000a', 
	'\u000d', '\u0045', '\u0065', '\u000a', '\u000d', '\u0044', '\u0064', '\u000a', 
	'\u000d', '\u000a', '\u000d', '\u004f', '\u006f', '\u000a', '\u000d', '\u0053', 
	'\u0073', '\u000a', '\u000d', '\u0045', '\u0065', '\u000a', '\u000d', '\u000a', 
	'\u000d', '\u0045', '\u0065', '\u000a', '\u000d', '\u0045', '\u0065', '\u000a', 
	'\u000d', '\u0050', '\u0070', '\u000a', '\u000d', '\u002d', '\u000a', '\u000d', 
	'\u0041', '\u0061', '\u000a', '\u000d', '\u004c', '\u006c', '\u000a', '\u000d', 
	'\u0049', '\u0069', '\u000a', '\u000d', '\u0056', '\u0076', '\u000a', '\u000d', 
	'\u0045', '\u0065', '\u000a', '\u000d', '\u0021', '\u003a', '\u004f', '\u006f', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u004e', '\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u004e', '\u0054', '\u006e', '\u0074', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0045', '\u0065', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u0043', '\u0063', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0054', '\u0074', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u0049', '\u0069', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004f', '\u006f', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u004e', '\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0054', '\u0074', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u002d', 
	'\u002e', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u004c', '\u006c', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0047', '\u0067', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u0054', '\u0074', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0048', '\u0068', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u0052', '\u0072', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0041', '\u0061', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0042', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u004e', '\u006e', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0053', '\u0073', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u0046', '\u0066', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0045', '\u0065', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u0052', '\u0072', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u002d', '\u002e', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0043', '\u0063', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u004f', '\u006f', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0044', '\u0064', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u0049', '\u0069', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u004e', '\u006e', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u0047', '\u0067', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0050', '\u0070', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u0047', '\u0067', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u0052', '\u0072', 
	'\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', 
	'\u0041', '\u0061', '\u007c', '\u007e', '\u0023', '\u0027', '\u002a', '\u002b', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0042', '\u005a', '\u005e', '\u007a', 
	'\u0021', '\u003a', '\u0044', '\u0064', '\u007c', '\u007e', '\u0023', '\u0027', 
	'\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u005e', '\u007a', '\u0021', '\u003a', '\u0045', '\u0065', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0021', '\u003a', '\u007c', '\u007e', 
	'\u0023', '\u0027', '\u002a', '\u002b', '\u002d', '\u002e', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u005e', '\u007a', '\u0048', '\u0054', '\u0054', '\u0050', 
	'\u002f', '\u0030', '\u0039', '\u002e', '\u0030', '\u0039', '\u000d', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002e', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u0030', 
	'\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', 
	'\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', 
	'\u0040', '\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', 
	'\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', 
	'\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u002d', '\u002e', '\u003a', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u003a', 
	'\u000d', '\u0020', '\u0030', '\u0039', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u002e', '\u0030', '\u0039', '\u0030', '\u0039', '\u002e', 
	'\u0030', '\u0039', '\u0030', '\u0039', '\u000d', '\u0020', '\u003a', '\u0030', 
	'\u0039', '\u000d', '\u0020', '\u003a', '\u0030', '\u0039', '\u002e', '\u0030', 
	'\u0039', '\u002e', '\u002e', '\u0030', '\u0039', '\u002e', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002d', '\u002e', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002d', '\u002e', '\u003d', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002c', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', 
	'\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002d', '\u002e', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003a', '\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u0040', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u0040', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0023', 
	'\u0025', '\u003d', '\u003f', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', 
	'\u003b', '\u0040', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', 
	'\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', 
	'\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', 
	'\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0023', '\u0025', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0023', '\u0025', 
	'\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', 
	'\u0066', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003d', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002b', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002c', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002b', '\u003a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0021', '\u0025', '\u002f', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', 
	'\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', 
	'\u0041', '\u0046', '\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002f', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', 
	'\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', 
	'\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u002d', '\u002e', 
	'\u002f', '\u003a', '\u003f', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002d', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u002f', '\u003a', '\u003f', '\u000d', '\u0020', '\u002f', 
	'\u003f', '\u0030', '\u0039', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002e', '\u0030', '\u0039', '\u0030', '\u0039', '\u002e', '\u0030', 
	'\u0039', '\u0030', '\u0039', '\u000d', '\u0020', '\u002f', '\u003a', '\u003f', 
	'\u0030', '\u0039', '\u000d', '\u0020', '\u002f', '\u003a', '\u003f', '\u0030', 
	'\u0039', '\u002e', '\u0030', '\u0039', '\u002e', '\u002e', '\u0030', '\u0039', 
	'\u002e', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002d', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', 
	'\u002e', '\u003a', '\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u0030', '\u0039', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', '\u005f', '\u007e', 
	'\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u003a', '\u003b', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003f', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u003f', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002d', '\u002e', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002c', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002f', 
	'\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', 
	'\u007e', '\u0024', '\u002e', '\u003a', '\u003b', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u002e', '\u002f', 
	'\u003a', '\u003b', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002d', '\u002f', '\u003d', '\u003f', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002f', '\u003a', '\u003b', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', 
	'\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002f', '\u003d', 
	'\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002f', '\u003d', '\u003f', '\u0040', '\u005f', '\u007e', '\u0024', '\u002e', 
	'\u003a', '\u003b', '\u0041', '\u005a', '\u0061', '\u007a', '\u0030', '\u0039', 
	'\u0041', '\u0046', '\u0061', '\u0066', '\u0030', '\u0039', '\u0041', '\u0046', 
	'\u0061', '\u0066', '\u000d', '\u0020', '\u0021', '\u0025', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', '\u003f', 
	'\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002d', '\u002e', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002d', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u003a', 
	'\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002d', '\u002e', '\u003a', '\u003b', '\u003d', 
	'\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', '\u003f', '\u0040', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002d', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', '\u0030', '\u0039', 
	'\u003a', '\u003b', '\u003f', '\u0040', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u003a', '\u003b', '\u003d', '\u005f', 
	'\u007e', '\u0024', '\u002f', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u003d', '\u005f', '\u007e', '\u0024', '\u002f', 
	'\u0030', '\u0039', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', 
	'\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002b', '\u002d', '\u002e', 
	'\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002b', 
	'\u002d', '\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u002b', '\u003a', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u002b', '\u002d', '\u002e', 
	'\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u002b', 
	'\u002d', '\u002e', '\u003a', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u002b', '\u003a', '\u002d', '\u002e', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', 
	'\u0025', '\u002f', '\u003d', '\u005f', '\u007e', '\u0024', '\u002e', '\u0030', 
	'\u0039', '\u003a', '\u003b', '\u003f', '\u005a', '\u0061', '\u007a', '\u000d', 
	'\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', '\u003b', 
	'\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', 
	'\u002b', '\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', 
	'\u002c', '\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002b', '\u002d', '\u002e', 
	'\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000d', '\u0020', 
	'\u0021', '\u0025', '\u002b', '\u002d', '\u002e', '\u003a', '\u003b', '\u003d', 
	'\u0040', '\u005f', '\u007e', '\u0024', '\u002c', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000d', '\u0020', '\u0021', '\u0025', '\u002b', 
	'\u003a', '\u003b', '\u003d', '\u0040', '\u005f', '\u007e', '\u0024', '\u002c', 
	'\u002d', '\u002e', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000d', '\u0020', '\u0021', '\u0025', '\u002f', '\u003d', '\u003f', '\u0040', 
	'\u005f', '\u007e', '\u0024', '\u002e', '\u0030', '\u0039', '\u003a', '\u003b', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0020', (char) 0
};

static readonly sbyte[] _http_parser_single_lengths =  new sbyte [] {
	0, 1, 1, 0, 1, 9, 1, 10, 
	1, 4, 8, 2, 1, 6, 4, 4, 
	4, 4, 4, 2, 4, 4, 4, 2, 
	4, 4, 4, 3, 4, 4, 4, 4, 
	4, 2, 6, 6, 8, 6, 6, 6, 
	6, 6, 6, 4, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 4, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 4, 
	6, 6, 6, 6, 6, 6, 4, 1, 
	1, 1, 1, 1, 0, 1, 0, 1, 
	8, 0, 0, 8, 7, 0, 0, 2, 
	1, 2, 0, 5, 1, 3, 2, 0, 
	1, 0, 1, 0, 3, 3, 1, 1, 
	1, 1, 2, 2, 10, 9, 8, 12, 
	9, 9, 7, 9, 7, 7, 0, 0, 
	0, 0, 8, 8, 0, 0, 11, 11, 
	2, 6, 7, 0, 0, 8, 10, 10, 
	0, 0, 7, 2, 1, 2, 0, 7, 
	1, 5, 4, 0, 1, 0, 1, 0, 
	5, 5, 1, 1, 1, 1, 2, 2, 
	9, 8, 7, 11, 8, 9, 7, 12, 
	11, 10, 14, 11, 12, 10, 10, 10, 
	0, 0, 7, 9, 8, 7, 11, 8, 
	9, 7, 13, 4, 4, 2, 6, 4, 
	4, 8, 13, 11, 13, 13, 11, 10, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0
};

static readonly sbyte[] _http_parser_range_lengths =  new sbyte [] {
	0, 2, 0, 2, 2, 5, 0, 6, 
	0, 6, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 0, 
	0, 0, 0, 0, 1, 0, 1, 0, 
	4, 3, 3, 5, 4, 3, 3, 3, 
	3, 3, 2, 3, 3, 0, 1, 3, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 0, 3, 3, 5, 5, 4, 4, 
	5, 3, 5, 4, 4, 4, 3, 3, 
	3, 3, 4, 4, 3, 3, 5, 5, 
	4, 4, 4, 3, 3, 4, 5, 4, 
	3, 3, 6, 3, 3, 3, 2, 3, 
	3, 0, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 0, 3, 3, 
	6, 6, 5, 5, 6, 3, 5, 5, 
	5, 4, 4, 5, 3, 5, 4, 4, 
	3, 3, 6, 6, 6, 5, 5, 6, 
	3, 5, 4, 3, 3, 4, 3, 3, 
	4, 5, 4, 5, 4, 4, 5, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 0, 0, 
	0, 0, 0, 0, 0
};

static readonly short[] _http_parser_index_offsets =  new short [] {
	0, 0, 4, 6, 9, 13, 28, 30, 
	47, 49, 60, 69, 72, 74, 81, 86, 
	91, 96, 101, 106, 109, 114, 119, 124, 
	127, 132, 137, 142, 146, 151, 156, 161, 
	166, 171, 174, 187, 200, 215, 228, 241, 
	254, 267, 280, 293, 304, 317, 330, 343, 
	355, 368, 381, 394, 407, 420, 433, 444, 
	457, 470, 483, 496, 509, 522, 535, 547, 
	560, 573, 586, 599, 612, 625, 638, 651, 
	662, 675, 688, 701, 714, 727, 740, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 782, 786, 790, 804, 816, 820, 824, 
	830, 835, 841, 844, 853, 858, 862, 866, 
	870, 873, 875, 878, 880, 885, 890, 893, 
	895, 898, 900, 906, 912, 928, 943, 956, 
	973, 988, 1001, 1014, 1028, 1040, 1052, 1056, 
	1060, 1064, 1068, 1081, 1094, 1098, 1102, 1119, 
	1136, 1143, 1154, 1166, 1170, 1174, 1187, 1203, 
	1218, 1222, 1226, 1240, 1246, 1251, 1257, 1260, 
	1271, 1276, 1282, 1288, 1292, 1295, 1297, 1300, 
	1302, 1309, 1316, 1319, 1321, 1324, 1326, 1332, 
	1338, 1354, 1369, 1382, 1399, 1414, 1427, 1440, 
	1458, 1475, 1490, 1509, 1526, 1542, 1558, 1573, 
	1588, 1592, 1596, 1610, 1626, 1641, 1654, 1671, 
	1686, 1699, 1712, 1730, 1738, 1746, 1753, 1763, 
	1771, 1780, 1794, 1812, 1829, 1847, 1865, 1882, 
	1898, 1902, 1906, 1910, 1914, 1918, 1922, 1926, 
	1930, 1934, 1938, 1942, 1946, 1950, 1954, 1958, 
	1962, 1966, 1970, 1974, 1978, 1982, 1986, 1988, 
	1989, 1990, 1991, 1992, 1993
};

static readonly byte[] _http_parser_trans_targs =  new byte [] {
	2, 4, 4, 0, 3, 0, 4, 4, 
	0, 5, 208, 208, 0, 6, 79, 88, 
	89, 123, 88, 91, 88, 88, 88, 95, 
	88, 134, 134, 0, 7, 0, 8, 9, 
	34, 55, 72, 34, 55, 72, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 233, 
	0, 9, 10, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 10, 0, 0, 10, 
	13, 24, 13, 24, 11, 0, 12, 11, 
	7, 0, 0, 12, 14, 20, 14, 20, 
	11, 0, 12, 15, 15, 11, 0, 12, 
	16, 16, 11, 0, 12, 17, 17, 11, 
	0, 12, 18, 18, 11, 0, 12, 19, 
	19, 11, 0, 12, 11, 0, 12, 21, 
	21, 11, 0, 12, 22, 22, 11, 0, 
	12, 23, 23, 11, 0, 12, 11, 0, 
	12, 25, 25, 11, 0, 12, 26, 26, 
	11, 0, 12, 27, 27, 11, 0, 12, 
	28, 11, 0, 12, 29, 29, 11, 0, 
	12, 30, 30, 11, 0, 12, 31, 31, 
	11, 0, 12, 32, 32, 11, 0, 12, 
	33, 33, 11, 0, 12, 11, 9, 10, 
	35, 35, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 36, 36, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 37, 44, 37, 44, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 38, 38, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 39, 39, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 40, 40, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	41, 41, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 42, 42, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 43, 43, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 45, 45, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 46, 
	46, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 47, 47, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	48, 9, 10, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 49, 49, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 50, 50, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 51, 
	51, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 52, 52, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 53, 53, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 54, 54, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 56, 56, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 57, 57, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	58, 58, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 59, 59, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 60, 60, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 61, 
	61, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 62, 62, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	63, 9, 10, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 64, 64, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 65, 65, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 66, 
	66, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 67, 67, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 68, 68, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 69, 69, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	0, 9, 10, 70, 70, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	71, 71, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 9, 9, 9, 
	9, 9, 9, 9, 9, 0, 9, 10, 
	73, 73, 9, 9, 9, 9, 9, 9, 
	9, 9, 0, 9, 10, 74, 74, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	9, 10, 75, 75, 9, 9, 9, 9, 
	9, 9, 9, 9, 0, 9, 10, 76, 
	76, 9, 9, 9, 9, 9, 9, 9, 
	9, 0, 9, 10, 77, 77, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 9, 
	10, 78, 78, 9, 9, 9, 9, 9, 
	9, 9, 9, 0, 9, 10, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 80, 
	0, 81, 0, 82, 0, 83, 0, 84, 
	0, 85, 0, 86, 0, 87, 0, 6, 
	0, 6, 79, 88, 89, 88, 91, 88, 
	88, 88, 88, 88, 88, 0, 90, 90, 
	90, 0, 88, 88, 88, 0, 6, 79, 
	92, 93, 92, 92, 92, 92, 92, 95, 
	92, 116, 116, 0, 6, 79, 92, 93, 
	92, 92, 92, 92, 92, 92, 92, 0, 
	94, 94, 94, 0, 92, 92, 92, 0, 
	96, 103, 114, 97, 97, 0, 96, 97, 
	97, 97, 0, 96, 98, 97, 97, 97, 
	0, 99, 99, 0, 6, 79, 100, 101, 
	102, 99, 99, 99, 0, 100, 99, 99, 
	99, 0, 6, 79, 102, 0, 6, 79, 
	102, 0, 104, 99, 99, 0, 105, 112, 
	0, 106, 0, 107, 110, 0, 108, 0, 
	6, 79, 102, 109, 0, 6, 79, 102, 
	101, 0, 107, 111, 0, 107, 0, 105, 
	113, 0, 105, 0, 96, 103, 115, 97, 
	97, 0, 96, 103, 97, 97, 97, 0, 
	6, 79, 92, 93, 117, 118, 92, 92, 
	92, 92, 92, 97, 92, 116, 116, 0, 
	6, 79, 92, 93, 117, 92, 92, 92, 
	92, 92, 97, 92, 116, 116, 0, 6, 
	79, 92, 93, 92, 92, 92, 92, 92, 
	92, 119, 119, 0, 6, 79, 92, 93, 
	120, 121, 122, 92, 92, 92, 92, 92, 
	92, 99, 119, 119, 0, 6, 79, 92, 
	93, 120, 92, 92, 92, 92, 92, 99, 
	92, 119, 119, 0, 6, 79, 92, 93, 
	122, 92, 92, 92, 92, 92, 92, 92, 
	0, 6, 79, 92, 93, 92, 92, 92, 
	92, 102, 92, 92, 92, 0, 6, 79, 
	123, 124, 128, 123, 130, 123, 123, 123, 
	123, 123, 123, 0, 6, 79, 125, 126, 
	125, 125, 125, 125, 125, 125, 125, 0, 
	6, 79, 125, 126, 125, 125, 125, 125, 
	125, 125, 125, 0, 127, 127, 127, 0, 
	125, 125, 125, 0, 129, 129, 129, 0, 
	123, 123, 123, 0, 6, 79, 131, 124, 
	132, 131, 131, 131, 131, 131, 131, 131, 
	0, 6, 79, 131, 124, 132, 131, 131, 
	131, 131, 131, 131, 131, 0, 133, 133, 
	133, 0, 131, 131, 131, 0, 6, 79, 
	88, 89, 135, 194, 203, 88, 91, 88, 
	88, 88, 195, 88, 202, 202, 0, 6, 
	79, 88, 89, 135, 182, 88, 88, 91, 
	88, 88, 88, 135, 136, 135, 135, 0, 
	136, 137, 136, 136, 136, 136, 0, 138, 
	139, 141, 138, 138, 138, 138, 138, 138, 
	138, 0, 6, 79, 138, 139, 138, 138, 
	138, 138, 138, 138, 138, 0, 140, 140, 
	140, 0, 138, 138, 138, 0, 6, 79, 
	138, 139, 142, 138, 138, 138, 138, 138, 
	138, 138, 0, 6, 79, 143, 144, 138, 
	143, 138, 146, 143, 143, 143, 147, 143, 
	175, 175, 0, 6, 79, 143, 144, 138, 
	143, 138, 146, 143, 143, 143, 143, 143, 
	143, 0, 145, 145, 145, 0, 143, 143, 
	143, 0, 6, 79, 138, 139, 138, 138, 
	138, 138, 147, 138, 138, 168, 168, 0, 
	148, 155, 166, 149, 149, 0, 148, 149, 
	149, 149, 0, 148, 150, 149, 149, 149, 
	0, 151, 151, 0, 6, 79, 152, 153, 
	138, 154, 138, 151, 151, 151, 0, 152, 
	151, 151, 151, 0, 6, 79, 138, 154, 
	138, 0, 6, 79, 138, 138, 154, 0, 
	156, 151, 151, 0, 157, 164, 0, 158, 
	0, 159, 162, 0, 160, 0, 6, 79, 
	138, 154, 138, 161, 0, 6, 79, 138, 
	154, 138, 153, 0, 159, 163, 0, 159, 
	0, 157, 165, 0, 157, 0, 148, 155, 
	167, 149, 149, 0, 148, 155, 149, 149, 
	149, 0, 6, 79, 138, 139, 169, 170, 
	138, 138, 138, 138, 149, 138, 138, 168, 
	168, 0, 6, 79, 138, 139, 169, 138, 
	138, 138, 138, 149, 138, 138, 168, 168, 
	0, 6, 79, 138, 139, 138, 138, 138, 
	138, 138, 138, 171, 171, 0, 6, 79, 
	138, 139, 172, 173, 174, 138, 138, 138, 
	138, 138, 151, 138, 171, 171, 0, 6, 
	79, 138, 139, 172, 138, 138, 138, 138, 
	151, 138, 138, 171, 171, 0, 6, 79, 
	138, 139, 174, 138, 138, 138, 138, 138, 
	138, 138, 0, 6, 79, 138, 139, 138, 
	138, 138, 138, 154, 138, 138, 138, 0, 
	6, 79, 143, 144, 176, 177, 138, 143, 
	138, 146, 143, 143, 143, 149, 143, 175, 
	175, 0, 6, 79, 143, 144, 176, 138, 
	143, 138, 146, 143, 143, 143, 149, 143, 
	175, 175, 0, 6, 79, 143, 144, 138, 
	143, 138, 146, 143, 143, 143, 143, 178, 
	178, 0, 6, 79, 143, 144, 179, 180, 
	138, 181, 143, 143, 138, 146, 143, 143, 
	143, 151, 178, 178, 0, 6, 79, 143, 
	144, 179, 138, 143, 138, 146, 143, 143, 
	143, 151, 143, 178, 178, 0, 6, 79, 
	143, 144, 138, 181, 143, 143, 138, 146, 
	143, 143, 143, 143, 143, 0, 6, 79, 
	143, 144, 138, 143, 138, 146, 143, 143, 
	143, 154, 143, 143, 143, 0, 6, 79, 
	183, 184, 141, 183, 138, 186, 183, 183, 
	183, 183, 183, 183, 0, 6, 79, 183, 
	184, 138, 183, 138, 186, 183, 183, 183, 
	183, 183, 183, 0, 185, 185, 185, 0, 
	183, 183, 183, 0, 6, 79, 138, 139, 
	138, 138, 138, 138, 95, 138, 138, 187, 
	187, 0, 6, 79, 138, 139, 188, 189, 
	138, 138, 138, 138, 97, 138, 138, 187, 
	187, 0, 6, 79, 138, 139, 188, 138, 
	138, 138, 138, 97, 138, 138, 187, 187, 
	0, 6, 79, 138, 139, 138, 138, 138, 
	138, 138, 138, 190, 190, 0, 6, 79, 
	138, 139, 191, 192, 193, 138, 138, 138, 
	138, 138, 99, 138, 190, 190, 0, 6, 
	79, 138, 139, 191, 138, 138, 138, 138, 
	99, 138, 138, 190, 190, 0, 6, 79, 
	138, 139, 193, 138, 138, 138, 138, 138, 
	138, 138, 0, 6, 79, 138, 139, 138, 
	138, 138, 138, 102, 138, 138, 138, 0, 
	6, 79, 88, 89, 135, 194, 135, 182, 
	88, 88, 91, 88, 88, 88, 195, 202, 
	202, 0, 136, 196, 197, 137, 195, 195, 
	195, 0, 136, 196, 136, 137, 195, 195, 
	195, 0, 136, 137, 136, 136, 198, 198, 
	0, 6, 79, 136, 199, 200, 201, 198, 
	198, 198, 0, 136, 199, 136, 137, 198, 
	198, 198, 0, 6, 79, 136, 201, 136, 
	136, 136, 136, 0, 6, 79, 138, 139, 
	141, 138, 138, 138, 138, 102, 138, 138, 
	138, 0, 6, 79, 88, 89, 135, 194, 
	203, 182, 88, 88, 91, 88, 88, 88, 
	195, 202, 202, 0, 6, 79, 88, 89, 
	135, 182, 88, 88, 91, 88, 88, 88, 
	135, 136, 204, 204, 0, 6, 79, 88, 
	89, 135, 205, 206, 207, 88, 88, 91, 
	88, 88, 88, 198, 204, 204, 0, 6, 
	79, 88, 89, 135, 205, 135, 182, 88, 
	88, 91, 88, 88, 88, 198, 204, 204, 
	0, 6, 79, 88, 89, 135, 207, 88, 
	88, 91, 88, 88, 88, 135, 136, 135, 
	135, 0, 6, 79, 183, 184, 141, 183, 
	138, 186, 183, 183, 183, 102, 183, 183, 
	183, 0, 5, 209, 209, 0, 5, 210, 
	210, 0, 5, 211, 211, 0, 5, 212, 
	212, 0, 5, 213, 213, 0, 5, 214, 
	214, 0, 5, 215, 215, 0, 5, 216, 
	216, 0, 5, 217, 217, 0, 5, 218, 
	218, 0, 5, 219, 219, 0, 5, 220, 
	220, 0, 5, 221, 221, 0, 5, 222, 
	222, 0, 5, 223, 223, 0, 5, 224, 
	224, 0, 5, 225, 225, 0, 5, 226, 
	226, 0, 5, 227, 227, 0, 5, 228, 
	228, 0, 5, 229, 229, 0, 5, 230, 
	230, 0, 5, 0, 234, 236, 0, 234, 
	235, 0, 0
};

static readonly sbyte[] _http_parser_trans_actions =  new sbyte [] {
	43, 46, 46, 0, 1, 0, 7, 7, 
	0, 52, 0, 0, 0, 121, 121, 92, 
	92, 88, 92, 92, 92, 92, 92, 92, 
	92, 116, 116, 0, 0, 0, 3, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 0, 3, 
	0, 0, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	82, 82, 82, 82, 82, 0, 85, 29, 
	5, 0, 0, 85, 29, 29, 29, 29, 
	29, 0, 85, 29, 29, 29, 0, 85, 
	29, 29, 29, 0, 85, 29, 29, 29, 
	0, 85, 29, 29, 29, 0, 85, 29, 
	29, 29, 0, 112, 29, 0, 85, 29, 
	29, 29, 0, 85, 29, 29, 29, 0, 
	85, 29, 29, 29, 0, 104, 29, 0, 
	85, 29, 29, 29, 0, 85, 29, 29, 
	29, 0, 85, 29, 29, 29, 0, 85, 
	29, 29, 0, 85, 29, 29, 29, 0, 
	85, 29, 29, 29, 0, 85, 29, 29, 
	29, 0, 85, 29, 29, 29, 0, 85, 
	29, 29, 29, 0, 108, 29, 0, 27, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 73, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 70, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 76, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 23, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 13, 0, 0, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 100, 100, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 0, 
	67, 67, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 96, 96, 15, 55, 
	15, 15, 15, 15, 15, 15, 15, 15, 
	0, 61, 61, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 0, 0, 52, 0, 
	0, 0, 52, 0, 35, 0, 0, 0, 
	41, 0, 0
};

static readonly sbyte[] _http_parser_from_state_actions =  new sbyte [] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 33, 0, 0, 39
};

static readonly sbyte[] _http_parser_eof_actions =  new sbyte [] {
	0, 0, 0, 0, 9, 49, 0, 0, 
	0, 27, 0, 31, 0, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 0, 0, 11, 11, 0, 0, 0, 
	0, 0, 0, 11, 0, 11, 11, 0, 
	0, 0, 0, 0, 11, 11, 0, 0, 
	0, 0, 0, 0, 11, 11, 11, 11, 
	11, 11, 11, 11, 64, 64, 0, 0, 
	0, 0, 58, 58, 0, 0, 11, 11, 
	0, 0, 11, 0, 0, 11, 11, 11, 
	0, 0, 11, 0, 0, 0, 0, 11, 
	0, 11, 11, 0, 0, 0, 0, 0, 
	11, 11, 0, 0, 0, 0, 0, 0, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	0, 0, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 0, 0, 0, 11, 0, 
	11, 11, 11, 11, 11, 11, 11, 11, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 0, 
	0, 33, 0, 37, 0
};

const int http_parser_start = 1;
const int http_parser_first_final = 233;
const int http_parser_error = 0;

const int http_parser_en_main = 1;
const int http_parser_en_body_identity = 231;
const int http_parser_en_body_identity_eof = 235;
const int http_parser_en_dead = 232;


#line 320 "HttpParser.cs.rl"
        
        public HttpParser(IHttpParserHandler parser)
        {
            this.parser = parser;
            
#line 1106 "HttpParser.cs"
	{
	cs = http_parser_start;
	}

#line 325 "HttpParser.cs.rl"
        }

        public int Execute(ArraySegment<byte> buf)
        {
            byte[] data = buf.Array;
            int p = buf.Offset;
            int pe = buf.Offset + buf.Count;
            //int eof = pe == 0 ? 0 : -1;
            int eof = pe;
            mark = 0;
            qsMark = 0;
            fragMark = 0;
            
			if (p == pe)
				Console.WriteLine("Parser executing on p == pe (EOF)");

            
#line 1129 "HttpParser.cs"
	{
	sbyte _klen;
	short _trans;
	sbyte _acts;
	sbyte _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _http_parser_from_state_actions[cs];
	_nacts = _http_parser_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _http_parser_actions[_acts++] ) {
	case 34:
#line 216 "HttpParser.cs.rl"
	{
			Console.WriteLine("leave_headers contentLength = " + contentLength);
            parser.OnHeadersEnd(this);

			// if chunked transfer, ignore content length and parse chunked (but we can't yet so bail)
			// if content length given but zero, read next request
			// if content length is given and non-zero, we should read that many bytes
			// if content length is not given
			//   if should keep alive, assume next request is coming and read it
			//   else read body until EOF

			if (contentLength == 0)
			{
				parser.OnMessageEnd(this);
				p--;
				{cs = 1; if (true) goto _again;}
			}
			else if (contentLength > 0)
			{
				p--;
				{cs = 231; if (true) goto _again;}
			}
			else
			{
				Console.WriteLine("Request had no content length.");
				if (ShouldKeepAlive)
				{
					parser.OnMessageEnd(this);
					Console.WriteLine("Should keep alive, will read next message.");
					p--;
					{cs = 1; if (true) goto _again;}
				}
				else
				{
					Console.WriteLine("Not keeping alive, will read until eof. Will hold, but currently fpc = " + p);
					p--;
					{cs = 235; if (true) goto _again;}
				}
			}
        }
	break;
	case 37:
#line 307 "HttpParser.cs.rl"
	{
			throw new Exception("Parser is dead; there shouldn't be more data. Client is bogus? fpc =" + p);
		}
	break;
#line 1195 "HttpParser.cs"
		default: break;
		}
	}

	_keys = _http_parser_key_offsets[cs];
	_trans = (short)_http_parser_index_offsets[cs];

	_klen = _http_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _http_parser_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _http_parser_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _http_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _http_parser_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _http_parser_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	cs = _http_parser_trans_targs[_trans];

	if ( _http_parser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _http_parser_trans_actions[_trans];
	_nacts = _http_parser_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _http_parser_actions[_acts++] )
		{
	case 0:
#line 48 "HttpParser.cs.rl"
	{
			Console.WriteLine("message_begin");
			parser.OnMessageBegin(this);
		}
	break;
	case 1:
#line 53 "HttpParser.cs.rl"
	{
            Console.WriteLine("matched absolute_uri");
        }
	break;
	case 2:
#line 56 "HttpParser.cs.rl"
	{
            Console.WriteLine("matched abs_path");
        }
	break;
	case 3:
#line 59 "HttpParser.cs.rl"
	{
            Console.WriteLine("matched authority");
        }
	break;
	case 4:
#line 62 "HttpParser.cs.rl"
	{
            Console.WriteLine("matched first space");
        }
	break;
	case 5:
#line 65 "HttpParser.cs.rl"
	{
            Console.WriteLine("leave_first_space");
        }
	break;
	case 7:
#line 74 "HttpParser.cs.rl"
	{
			Console.WriteLine("matched_leading_crlf");
		}
	break;
	case 8:
#line 77 "HttpParser.cs.rl"
	{
			Console.WriteLine("matched_last_crlf_before_body");
		}
	break;
	case 9:
#line 80 "HttpParser.cs.rl"
	{
			Console.WriteLine("matched_header_crlf");
		}
	break;
	case 10:
#line 84 "HttpParser.cs.rl"
	{
			Console.WriteLine("enter_method");
            mark = p;
        }
	break;
	case 12:
#line 94 "HttpParser.cs.rl"
	{
            Console.WriteLine("leave_method fpc " + p + " mark " + mark);
            parser.OnMethod(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 13:
#line 99 "HttpParser.cs.rl"
	{
            Console.WriteLine("enter_request_uri fpc " + p);
            mark = p;
        }
	break;
	case 15:
#line 109 "HttpParser.cs.rl"
	{
            Console.WriteLine("leave_request_uri fpc " + p + " mark " + mark);
            parser.OnRequestUri(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 16:
#line 114 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_query_string fpc " + fpc);
            qsMark = p;
        }
	break;
	case 17:
#line 119 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_query_string fpc " + fpc + " qsMark " + qsMark);
            parser.OnQueryString(this, new ArraySegment<byte>(data, qsMark, p - qsMark));
        }
	break;
	case 18:
#line 123 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_fragment fpc " + fpc);
            fragMark = p;
        }
	break;
	case 19:
#line 128 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_fragment fpc " + fpc + " fragMark " + fragMark);
            parser.OnFragment(this, new ArraySegment<byte>(data, fragMark, p - fragMark));
        }
	break;
	case 20:
#line 133 "HttpParser.cs.rl"
	{
			versionMajor = (char)data[p] - '0';
		}
	break;
	case 21:
#line 137 "HttpParser.cs.rl"
	{
			versionMinor = (char)data[p] - '0';
		}
	break;
	case 22:
#line 141 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_header_name fpc " + fpc + " fc " + (char)fc);
            mark = p;
        }
	break;
	case 23:
#line 146 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_name fpc " + fpc + " fc " + (char)fc);
            parser.OnHeaderName(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 24:
#line 151 "HttpParser.cs.rl"
	{
            if (contentLength != -1) throw new Exception("Already got Content-Length. Possible attack?");
			Console.WriteLine("Saw content length");
			contentLength = 0;
        }
	break;
	case 25:
#line 157 "HttpParser.cs.rl"
	{
			Console.WriteLine("header_connection");
			gotConnectionHeader = true;
		}
	break;
	case 26:
#line 162 "HttpParser.cs.rl"
	{
			Console.WriteLine("header_connection_close");
			if (gotConnectionHeader)
				gotConnectionClose = true;
		}
	break;
	case 27:
#line 168 "HttpParser.cs.rl"
	{
			Console.WriteLine("header_connection_keepalive");
			if (gotConnectionHeader)
				gotConnectionKeepAlive = true;
		}
	break;
	case 28:
#line 174 "HttpParser.cs.rl"
	{
			Console.WriteLine("Saw transfer encoding");
			gotTransferEncodingHeader = true;
		}
	break;
	case 29:
#line 179 "HttpParser.cs.rl"
	{
			if (gotTransferEncodingHeader)
				gotTransferEncodingChunked = true;
		}
	break;
	case 30:
#line 184 "HttpParser.cs.rl"
	{
			gotUpgradeHeader = true;
		}
	break;
	case 31:
#line 188 "HttpParser.cs.rl"
	{
            //Console.WriteLine("enter_header_value fpc " + fpc + " fc " + (char)fc);
            mark = p;
        }
	break;
	case 32:
#line 193 "HttpParser.cs.rl"
	{
            //Console.WriteLine("header_value_char fpc " + fpc + " fc '" + (char)fc + "'");
            if (contentLength > -1)
            {
                var cfc = (char)data[p];

                if (cfc < '0' || cfc > '9')
                    throw new Exception("Bogus content length");

                contentLength *= 10;
                contentLength += (int)data[p] - (int)'0';
				Console.WriteLine("Content length is looking like " + contentLength);
            }
        }
	break;
	case 33:
#line 208 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_value fpc " + fpc + " fc " + (char)fc);
			var count = p - mark;
			if (count > 0 && gotUpgradeHeader)
				gotUpgradeValue = true;
            parser.OnHeaderValue(this, new ArraySegment<byte>(data, mark, count));
        }
	break;
	case 35:
#line 257 "HttpParser.cs.rl"
	{
			var toRead = Math.Min(pe - p, contentLength);
			Console.WriteLine("Reading " + toRead + " bytes from body.");
			if (toRead > 0)
			{
				parser.OnBody(this, new ArraySegment<byte>(data, p, toRead));
				p += toRead;
				contentLength -= toRead;

				if (contentLength == 0)
				{
					parser.OnMessageEnd(this);

					if (ShouldKeepAlive)
					{
						Console.WriteLine("Transitioning from identity body to next message.");
						p--;
						{cs = 1; if (true) goto _again;}
					}
					else
					{
						p--;
						{cs = 232; if (true) goto _again;}
					}
				}
			}
		}
	break;
	case 38:
#line 311 "HttpParser.cs.rl"
	{
			Console.WriteLine("in_body_identity_eof");
		}
	break;
#line 1518 "HttpParser.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	sbyte __acts = _http_parser_eof_actions[cs];
	sbyte __nacts = _http_parser_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _http_parser_actions[__acts++] ) {
	case 6:
#line 68 "HttpParser.cs.rl"
	{
            Console.WriteLine("eof_leave_first_space");
        }
	break;
	case 11:
#line 89 "HttpParser.cs.rl"
	{
            Console.WriteLine("eof_leave_method fpc " + p + " mark " + mark);
            parser.OnMethod(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 14:
#line 104 "HttpParser.cs.rl"
	{
            Console.WriteLine("eof_leave_request_uri!! fpc " + p + " mark " + mark);
            parser.OnRequestUri(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 17:
#line 119 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_query_string fpc " + fpc + " qsMark " + qsMark);
            parser.OnQueryString(this, new ArraySegment<byte>(data, qsMark, p - qsMark));
        }
	break;
	case 19:
#line 128 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_fragment fpc " + fpc + " fragMark " + fragMark);
            parser.OnFragment(this, new ArraySegment<byte>(data, fragMark, p - fragMark));
        }
	break;
	case 23:
#line 146 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_name fpc " + fpc + " fc " + (char)fc);
            parser.OnHeaderName(this, new ArraySegment<byte>(data, mark, p - mark));
        }
	break;
	case 33:
#line 208 "HttpParser.cs.rl"
	{
            //Console.WriteLine("leave_header_value fpc " + fpc + " fc " + (char)fc);
			var count = p - mark;
			if (count > 0 && gotUpgradeHeader)
				gotUpgradeValue = true;
            parser.OnHeaderValue(this, new ArraySegment<byte>(data, mark, count));
        }
	break;
	case 34:
#line 216 "HttpParser.cs.rl"
	{
			Console.WriteLine("leave_headers contentLength = " + contentLength);
            parser.OnHeadersEnd(this);

			// if chunked transfer, ignore content length and parse chunked (but we can't yet so bail)
			// if content length given but zero, read next request
			// if content length is given and non-zero, we should read that many bytes
			// if content length is not given
			//   if should keep alive, assume next request is coming and read it
			//   else read body until EOF

			if (contentLength == 0)
			{
				parser.OnMessageEnd(this);
				p--;
				{cs = 1; if (true) goto _again;}
			}
			else if (contentLength > 0)
			{
				p--;
				{cs = 231; if (true) goto _again;}
			}
			else
			{
				Console.WriteLine("Request had no content length.");
				if (ShouldKeepAlive)
				{
					parser.OnMessageEnd(this);
					Console.WriteLine("Should keep alive, will read next message.");
					p--;
					{cs = 1; if (true) goto _again;}
				}
				else
				{
					Console.WriteLine("Not keeping alive, will read until eof. Will hold, but currently fpc = " + p);
					p--;
					{cs = 235; if (true) goto _again;}
				}
			}
        }
	break;
	case 36:
#line 285 "HttpParser.cs.rl"
	{
			Console.WriteLine("eof_leave_body_identity_eof");
			var toRead = pe - p;
			if (toRead > 0)
			{
				parser.OnBody(this, new ArraySegment<byte>(data, p, toRead));
				p += toRead - 1;
			}
			else
			{
				parser.OnMessageEnd(this);
				
				if (ShouldKeepAlive)
					{cs = 1; if (true) goto _again;}
				else
				{
					p--;
					{cs = 232; if (true) goto _again;}
				}
			}
		}
	break;
#line 1653 "HttpParser.cs"
		default: break;
		}
	}
	}

	_out: {}
	}

#line 342 "HttpParser.cs.rl"
            
            var result = p - buf.Offset;

			if (result != buf.Count)
			{
				Console.WriteLine("error on character " + p);
				Console.WriteLine("('" + buf.Array[p] + "')");
				Console.WriteLine("('" + (char)buf.Array[p] + "')");
			}

			return p - buf.Offset;
        }
    }
}